
import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Phone, Search, ShoppingCart, Settings, CheckCircle, Clock } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';

interface AvailableNumber {
  phone_number: string;
  region_information: any;
  features: string[];
  cost_information: any;
}

interface OwnedNumber {
  id: string;
  phone_number: string;
  status: string;
  country_code: string;
  purchased_at: string;
  configured_at?: string;
  webhook_url?: string;
  telnyx_status?: string;
}

export const TelnyxPhoneNumbersPage = () => {
  const [availableNumbers, setAvailableNumbers] = useState<AvailableNumber[]>([]);
  const [ownedNumbers, setOwnedNumbers] = useState<OwnedNumber[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  const [purchaseLoading, setPurchaseLoading] = useState<string | null>(null);
  const [areaCode, setAreaCode] = useState('415'); // San Francisco –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—à–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
  const loadOwnedNumbers = async () => {
    try {
      const { data, error } = await supabase.functions.invoke('telnyx-phone-numbers', {
        body: { action: 'list' }
      });

      if (error) throw error;
      
      if (data.success) {
        setOwnedNumbers(data.phone_numbers);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–æ–≤:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–º–µ—Ä–∞');
    }
  };

  // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  const searchNumbers = async () => {
    setSearchLoading(true);
    try {
      const { data, error } = await supabase.functions.invoke('telnyx-phone-numbers', {
        body: { 
          action: 'search',
          area_code: areaCode,
          country_code: 'US'
        }
      });

      if (error) throw error;
      
      if (data.success) {
        setAvailableNumbers(data.available_numbers);
        toast.success(`–ù–∞–π–¥–µ–Ω–æ ${data.available_numbers.length} –Ω–æ–º–µ—Ä–æ–≤`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤');
    } finally {
      setSearchLoading(false);
    }
  };

  // –ü–æ–∫—É–ø–∫–∞ –Ω–æ–º–µ—Ä–∞
  const purchaseNumber = async (phoneNumber: string) => {
    setPurchaseLoading(phoneNumber);
    try {
      const { data, error } = await supabase.functions.invoke('telnyx-phone-numbers', {
        body: { 
          action: 'purchase',
          phone_number: phoneNumber,
          country_code: 'US'
        }
      });

      if (error) throw error;
      
      if (data.success) {
        toast.success('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞–Ω! –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–ª—è AI...');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        setTimeout(() => configureNumber(phoneNumber), 2000);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        loadOwnedNumbers();
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        setAvailableNumbers(prev => 
          prev.filter(num => num.phone_number !== phoneNumber)
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä');
    } finally {
      setPurchaseLoading(null);
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è AI
  const configureNumber = async (phoneNumber: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('telnyx-phone-numbers', {
        body: { 
          action: 'configure',
          phone_number: phoneNumber
        }
      });

      if (error) throw error;
      
      if (data.success) {
        toast.success('–ù–æ–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è AI –∑–≤–æ–Ω–∫–æ–≤!');
        loadOwnedNumbers();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞');
    }
  };

  useEffect(() => {
    loadOwnedNumbers();
  }, []);

  const formatPhoneNumber = (phone: string) => {
    const cleaned = phone.replace(/\D/g, '');
    if (cleaned.length === 11 && cleaned.startsWith('1')) {
      const number = cleaned.slice(1);
      return `+1 (${number.slice(0, 3)}) ${number.slice(3, 6)}-${number.slice(6)}`;
    }
    return phone;
  };

  const getStatusBadge = (number: OwnedNumber) => {
    if (number.configured_at && number.telnyx_status === 'active') {
      return <Badge variant="success" className="flex items-center gap-1">
        <CheckCircle size={12} />
        AI –ì–æ—Ç–æ–≤
      </Badge>;
    } else if (number.status === 'pending') {
      return <Badge variant="warning" className="flex items-center gap-1">
        <Clock size={12} />
        –ê–∫—Ç–∏–≤–∞—Ü–∏—è
      </Badge>;
    } else {
      return <Badge variant="info">–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</Badge>;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Telnyx –ù–æ–º–µ—Ä–∞</h1>
          <p className="text-muted-foreground">
            –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ –¥–ª—è AI
          </p>
        </div>
        <Badge variant="fixlyfy" className="px-3 py-1">
          –ù–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ Amazon Connect!
        </Badge>
      </div>

      {/* –ù–∞—à–∏ –Ω–æ–º–µ—Ä–∞ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Phone className="h-5 w-5" />
            –í–∞—à–∏ AI –ù–æ–º–µ—Ä–∞ ({ownedNumbers.length})
          </CardTitle>
        </CardHeader>
        <CardContent>
          {ownedNumbers.length === 0 ? (
            <p className="text-muted-foreground text-center py-8">
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–º–µ—Ä–æ–≤. –ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–æ–º–µ—Ä –Ω–∏–∂–µ! üëá
            </p>
          ) : (
            <div className="grid gap-4">
              {ownedNumbers.map((number) => (
                <div key={number.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-4">
                    <Phone className="h-5 w-5 text-muted-foreground" />
                    <div>
                      <div className="font-medium">
                        {formatPhoneNumber(number.phone_number)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        –ö—É–ø–ª–µ–Ω: {new Date(number.purchased_at).toLocaleDateString('ru')}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-3">
                    {getStatusBadge(number)}
                    {!number.configured_at && (
                      <Button
                        size="sm"
                        onClick={() => configureNumber(number.phone_number)}
                        className="flex items-center gap-1"
                      >
                        <Settings size={14} />
                        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AI
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5" />
            –ö—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-3">
            <Input
              placeholder="–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 415)"
              value={areaCode}
              onChange={(e) => setAreaCode(e.target.value)}
              className="max-w-xs"
            />
            <Button 
              onClick={searchNumbers} 
              disabled={searchLoading}
              className="flex items-center gap-2"
            >
              <Search size={16} />
              {searchLoading ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞'}
            </Button>
          </div>

          {availableNumbers.length > 0 && (
            <div className="space-y-3">
              <h3 className="font-medium">–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:</h3>
              <div className="grid gap-3">
                {availableNumbers.slice(0, 10).map((number) => (
                  <div key={number.phone_number} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <Phone className="h-4 w-4 text-muted-foreground" />
                      <div>
                        <div className="font-medium">
                          {formatPhoneNumber(number.phone_number)}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {number.region_information?.[0]?.region_name || 'USA'} ‚Ä¢ 
                          ${number.cost_information?.monthly_cost || '1.00'}/–º–µ—Å
                        </div>
                      </div>
                      <div className="flex gap-1">
                        {number.features.includes('voice') && (
                          <Badge variant="success" className="text-xs">–ó–≤–æ–Ω–∫–∏</Badge>
                        )}
                        {number.features.includes('sms') && (
                          <Badge variant="info" className="text-xs">SMS</Badge>
                        )}
                      </div>
                    </div>
                    <Button
                      size="sm"
                      onClick={() => purchaseNumber(number.phone_number)}
                      disabled={purchaseLoading === number.phone_number}
                      className="flex items-center gap-1"
                    >
                      <ShoppingCart size={14} />
                      {purchaseLoading === number.phone_number ? '–ü–æ–∫—É–ø–∞–µ–º...' : '–ö—É–ø–∏—Ç—å'}
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};
